<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaurin&#39;s Paste Dump</title>
    <description>Welcome to my paste dump!
</description>
    <link>https://kaurin.github.io/</link>
    <atom:link href="https://kaurin.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 09 Jun 2016 19:03:11 +0100</pubDate>
    <lastBuildDate>Thu, 09 Jun 2016 19:03:11 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Cross-compile and setup ZNC for Ubuntu 14.04</title>
        <description>&lt;h1 id=&quot;why-are-you-writing-this-article&quot;&gt;Why are you writing this article?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;I have a small VPS box that didn’t have the memory to compile ZNC with Python/Perl/TCL support even without the ‘-pipe’ CFLAG.&lt;/li&gt;
  &lt;li&gt;As a reminder to myself on cross compiling&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;We’ll have a “Compile” and “Destination” machines (or virts, depending on your capabilities)&lt;/li&gt;
  &lt;li&gt;Compile box best be discardable VM with a fresh install of Ubuntu 14.04, with more than 1GB of ram. I’m not sure how much more ram, but 1GB won’t cut it.&lt;/li&gt;
  &lt;li&gt;We won’t be creating a package. This is an old school compile and .tar copy-install. Just a heads up if you don’t like this sort of thing&lt;/li&gt;
  &lt;li&gt;Due to point above, compile prefix will be /opt/znc.  I like a higher-degree of separation, which is why I use “/opt/znc” instead of just “/opt”.&lt;/li&gt;
  &lt;li&gt;After compiling, we’ll create a separate user for ZNC and an upstart file to have ZNC run as a service via non-privileged user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;compile-box&quot;&gt;Compile box&lt;/h1&gt;

&lt;p&gt;Assuming that  this is a fresh install of Ubuntu 14.04 (server), run the following commands.&lt;/p&gt;

&lt;p&gt;I recommend you do them 1-by-1 for maximum control.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Note on &amp;quot;build-dep znc&amp;quot; - manually installing libraries might get us newer &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# dep-library versions, but I&amp;#39;m lazy.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# swig3.0 is a buld requirement, not needed on the destination box.&lt;/span&gt;
sudo add-apt-repository -y ppa:teward/swig3.0
sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get -y install build-essential autoconf automake git swig3.0 libicu-dev
sudo apt-get -y build-dep znc

&lt;span class=&quot;c&quot;&gt;# Also check: http://wiki.znc.in/Installation#Other_Build_Dependencies&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ^ just in case.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Optional:&lt;/span&gt;
sudo reboot

&lt;span class=&quot;c&quot;&gt;# Workspace preparation:&lt;/span&gt;
mkdir ~/git
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git

&lt;span class=&quot;c&quot;&gt;# Let&amp;#39;s get the project and cd into it&lt;/span&gt;
git clone https://github.com/znc/znc.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;znc

&lt;span class=&quot;c&quot;&gt;# Check out the 1.6.3 tag or whichever you like. To list:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# git tag -l &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note: this guide was written for 1.6.3 tag (version)&lt;/span&gt;

git checkout tags/znc-1.6.3

&lt;span class=&quot;c&quot;&gt;# This is a project requirement&lt;/span&gt;
./autogen.sh

&lt;span class=&quot;c&quot;&gt;# Configure with tcl,perl,python&lt;/span&gt;
./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --enable-python&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;python3 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --enable-tcl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --enable-perl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/znc 

&lt;span class=&quot;c&quot;&gt;# Another project requirement&lt;/span&gt;
git submodule update --init --recursive

&lt;span class=&quot;c&quot;&gt;# DO THIS ON THE DESTINATION BOX TO GET THE ARCH!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If gcc is not on the destination box, install build-essential, &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and then remove it after running the command&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that the 3 lines below are 1 command!&lt;/span&gt;
gcc -march&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;native -E -v - &amp;lt;/dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    grep cc1 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    perl -pe &lt;span class=&quot;s1&quot;&gt;&amp;#39;s|.*-march=(.*?) .*|\1|g&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Back to Compile box. Remember to replace &amp;quot;REPLACEME&amp;quot; with your arch!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-march=REPLACEME -O2 -pipe&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$CFLAGS&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# -jx = number of cores +1. I had 8 cores = -j9&lt;/span&gt;
make -j9

&lt;span class=&quot;c&quot;&gt;# This will install to prefix /opt/znc/{bin,..}&lt;/span&gt;
sudo make install

&lt;span class=&quot;c&quot;&gt;# Let&amp;#39;s create the tarball!&lt;/span&gt;
tar -czf ~/znc.tar.gz /opt/znc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;intermezzo&quot;&gt;Intermezzo&lt;/h1&gt;

&lt;p&gt;Copy the tar “znc.tar.gz” from the Compile box to the Destination box&lt;/p&gt;

&lt;h1 id=&quot;destination-box&quot;&gt;Destination box&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Prepare the box for installation of znc&lt;/span&gt;
sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get install -y libperl5.18 libpython3.4 libtcl8.5 tcl8.5 libicu52

&lt;span class=&quot;c&quot;&gt;# Optional&lt;/span&gt;
sudo reboot

&lt;span class=&quot;c&quot;&gt;# Let&amp;#39;s extract to the same dir structure as on Compile&lt;/span&gt;
sudo tar -xf znc.tar.gz  -C /

&lt;span class=&quot;c&quot;&gt;# Create dedicated user &amp;quot;zncuser&amp;quot;&lt;/span&gt;
sudo useradd -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ZNC bouncer user&amp;quot;&lt;/span&gt; -ms /bin/false zncuser

&lt;span class=&quot;c&quot;&gt;# Initial znc configuration as &amp;quot;zncuser&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# At the last prompt, don&amp;#39;t select to start now. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We&amp;#39;ll do it via upstart in a second&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/zncuser sudo -u zncuser /opt/znc/bin/znc --makeconf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;set-up-the-upstart-script&quot;&gt;Set up the upstart script&lt;/h1&gt;

&lt;h2 id=&quot;etcinitzncbncconf&quot;&gt;/etc/init/zncbnc.conf&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# znc

description &amp;quot;IRC Bouncer&amp;quot;

start on (runlevel [2345] and net-device-up)

stop on runlevel [016]

respawn
respawn limit 10 5
setuid zncuser

script
  exec /opt/znc/bin/znc -fn
end script&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;final-words&quot;&gt;Final words&lt;/h1&gt;

&lt;p&gt;You can now start your bouncer via:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo start zncbnc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will also get started automatically with system reboot which you can test.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.znc.in/ZNC&quot;&gt;ZNC documentation&lt;/a&gt; is quite extensive, so I won’t dive deep into configuring it. Have fun!&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 16:00:00 +0000</pubDate>
        <link>https://kaurin.github.io/misc/2015/12/28/cross-compile-and-setup-znc-ubuntu.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/misc/2015/12/28/cross-compile-and-setup-znc-ubuntu.html</guid>
        
        <category>irc,znc,bouncer</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Letsencrypt is awesome!</title>
        <description>&lt;p&gt;I was about to shop for an SSL cert for a domain I own, and decided to do another “free SSL” Google search.&lt;/p&gt;

&lt;p&gt;To my pleasant surprise, I stumbled upon this project “&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;letsencrypt&lt;/a&gt;” which is sponsored by quite a lot of enterprise companies (Mozilla, Facebook to name a few).&lt;/p&gt;

&lt;p&gt;In a nutshell, this is an CLI tool which makes life easier when you wish to configure your webserver for SSL, and also provide you with a free CA SSL cert for a domain you own. Pretty neat!&lt;/p&gt;

&lt;p&gt;I didn’t test this “quick-and-easy” setup with webservers, though. From what I see, it works via a webserver plugin.&lt;/p&gt;

&lt;p&gt;Instead, I opted for the &lt;code&gt;letsencrypt certonly --manual&lt;/code&gt; command. This command will require you to spin up a temporary Python webserver on a host that is verifiable by resolving the domain name. I’d say this is a small price to pay for a free SSL cert! Once that is done, you end up with your certs (and some of them bundled separately for convenience) in &lt;code&gt;/etc/letsencrypt/live/$domain/&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;This piece of software has my strong recommendation. You should check out their &lt;a href=&quot;https://letsencrypt.readthedocs.org/en/latest/using.html&quot;&gt;documentation&lt;/a&gt; which is compact and comprehensive. Have fun securing your stuff!&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;While you are at it, you might want to check out &lt;a href=&quot;https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html&quot;&gt;Raymii’s blog post&lt;/a&gt; on tightening your SSL settings on Nginx.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 16:00:00 +0000</pubDate>
        <link>https://kaurin.github.io/misc/2015/12/27/letsencrypt-is-awesome.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/misc/2015/12/27/letsencrypt-is-awesome.html</guid>
        
        <category>ssl,openssl,certificates</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>EC2 + Ansible Setup</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;As the name of this website states, this is just my pastedump. By no means is this an all-round best-practice guide. If your use case is to have a light touch on an ansible-master in EC2 without the need to implement ‘ansible-pull’, then I’d consider this an OK guide.&lt;/p&gt;

&lt;p&gt;This is what the setup will look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 control instance in EC2 called ansible-master (public subnet)&lt;/li&gt;
  &lt;li&gt;Multiple target instances in EC2 (private subnet/s)&lt;/li&gt;
  &lt;li&gt;Target instances will belong to different stacks/roles. This will be controlled via EC2 tags&lt;/li&gt;
  &lt;li&gt;No credentials will be stored on the master instance. We’ll use SSH SendEnv and AgentForward capabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;aws&quot;&gt;AWS&lt;/h1&gt;

&lt;h2 id=&quot;iam&quot;&gt;IAM&lt;/h2&gt;

&lt;p&gt;Create an “ansible-master” user which has permissions to Describe* on RDS, EC2 and ElastiCache. Download the credentials. You will use them later in &lt;strong&gt;~/.bashrc&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;ec2:Describe*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;elasticache:Describe*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;rds:Describe*&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h2&gt;

&lt;p&gt;Create or import “ansible-master” and “ansible-controller” SSH keys in the EC2 console.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ansible-controller = Workstation -&amp;gt; Ansible master instance&lt;/li&gt;
  &lt;li&gt;ansible-target = Workstation -(ForwardAgent)-&amp;gt; Ansible master -&amp;gt; Ansible targets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This setup allows us to keep all credentials (EC2/SSH) on our local workstation, and just forward those credentials to the “ansible-master” instance when we SSH into it. This suits only my specific use case where I have very little automation on the Ansible side.&lt;/p&gt;

&lt;h2 id=&quot;launch-target-instances&quot;&gt;Launch target instances&lt;/h2&gt;

&lt;p&gt;We will test them later, for now, launch them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Into private subnets&lt;/li&gt;
  &lt;li&gt;SSH key: ansible-target&lt;/li&gt;
  &lt;li&gt;Tag: AnsibleSlave=True&lt;/li&gt;
  &lt;li&gt;Tag: Role=Web&lt;/li&gt;
  &lt;li&gt;Tag: Stack=Prod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Role/Stack are optional, but useful if you want to play around with how you can limit execution based on EC2 tags. If you decide to go with these optional tags, spin up multiple instances and change up the Role and Stack tags among them.&lt;/p&gt;

&lt;p&gt;You never need to know any other EC2 instance details except for the tags. Ansible will figure out the private IPs and other info based on said tags.&lt;/p&gt;

&lt;h1 id=&quot;workstation&quot;&gt;Workstation&lt;/h1&gt;

&lt;h2 id=&quot;sshconfig&quot;&gt;~/.ssh/config&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Host ansible
    HostName xx.xx.xx.xx
    User ec2-user
    SendEnv AWS_ACCESS_KEY_ID
    SendEnv AWS_SECRET_ACCESS_KEY 
    IdentityFile ~/.ssh/ansible-controller
    ForwardAgent yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bashrc&quot;&gt;~/.bashrc&lt;/h2&gt;

&lt;p&gt;The idea here is to set the AWS env. variables specifically for our connection towards the ansible-master. Unfortunately, we can’t do this in one go in our ssh config.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;AWS_ACCESS_KEY_ID=&amp;quot;SECRET&amp;quot; AWS_SECRET_ACCESS_KEY=&amp;quot;ACCESS&amp;quot; ssh ansible&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;ansible-master-instance&quot;&gt;Ansible master instance&lt;/h1&gt;

&lt;h2 id=&quot;ssh-daemon&quot;&gt;SSH Daemon&lt;/h2&gt;

&lt;p&gt;We want to be able to accept the environment variables from the SSH client from our workstation. In order to make this happen, we need to change the sshd_config&lt;/p&gt;

&lt;h3 id=&quot;etcsshsshdconfig&quot;&gt;/etc/ssh/sshd_config&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;AcceptEnv AWS_ACCESS_KEY_ID
AcceptEnv AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ansible-installation&quot;&gt;Ansible installation&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install ansible
sudo pip install ansible --upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default Ansible hosts file is plain-text and consists of your hosts and host groups. In EC2, it makes more sense to use the EC2 inventory hosts script which replaces the hosts file. This hosts file also requires the ec2.ini file on which we’ll touch on in a short bit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo wget &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://raw.github.com/ansible/ansible/devel/contrib/inventory/ec2.py&amp;#39;&lt;/span&gt; -O /etc/ansible/hosts
chmod +x /etc/ansible/hosts
sudo wget &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini&amp;#39;&lt;/span&gt; -O /etc/ansible/ec2.ini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ec2ini&quot;&gt;ec2.ini&lt;/h2&gt;

&lt;p&gt;It’s time to change ec2.ini settings.
Note: Adjust this on your own accord. The file is nicely commented. I’ll note some of the settings I adjusted&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[ec2]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;regions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eu-central-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;regions_exclude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;us-gov-west-1,cn-north-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;destination_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;private_dns_name&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;vpc_destination_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;private_ip_address&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;elasticache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache_max_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;instance_filters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tag:AnsibleSlave=True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last option might be the most significant one. Only instances with this tag will be considered as Ansible-controllable&lt;/p&gt;

&lt;h1 id=&quot;time-to-test&quot;&gt;Time to test&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;SSH into the instance by running &lt;strong&gt;ansconn&lt;/strong&gt;, which is based on the alias we created in &lt;strong&gt;~/.bashrc&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Run: &lt;code&gt;ansible all -m ping&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run: &lt;code&gt;ansible tag_Role_Web -m ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you implement playbooks, you can fine-grain your prod/stage stacks with a layered approach, but this is explained in Ansible docs.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 02:23:00 +0000</pubDate>
        <link>https://kaurin.github.io/aws/2015/12/27/ansible-ec2.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/aws/2015/12/27/ansible-ec2.html</guid>
        
        <category>aws,ansible,ssh</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>CFN + ASG + LifeCycle Hooks</title>
        <description>&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;When you use CFN to provision an ASG with LifeCycle events which trigger on instance launches, the issue is that CFN first creates an ASG. ASG immediately starts spinning up instances based on ASG settings. LifeCycle hooks get created usually with some delay.&lt;/p&gt;

&lt;p&gt;This causes some instances to get launched without being “monitored” by the “launch” lifecylce hooks.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ASG set to 0/0/0 in CFN&lt;/li&gt;
  &lt;li&gt;Custom resource which has “DependsOn” lifecycle resource for instance launches&lt;/li&gt;
  &lt;li&gt;Lambda function which can perform “updateAutoScalingGroup”(called by custom resource)&lt;/li&gt;
  &lt;li&gt;IAM execution role for lambda (as/updateAutoScalingGroup)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;Region which supports Lambda&lt;/p&gt;

&lt;h1 id=&quot;cfn-command-to-create-stack&quot;&gt;CFN command to create stack&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws cloudformation update-stack &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --template-body file://ASG-LifeCycle-DelayFirstInstance.cform  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --capabilities CAPABILITY_IAM &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --parameters file://ASG-LifeCycle-DelayFirstInstance.params  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --stack-name MyStackName123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can just change “create-stack” -&amp;gt; “update-stack” if you want to update the stack instead of create a new one.&lt;/p&gt;

&lt;h1 id=&quot;files&quot;&gt;Files&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/ASG-LifeCycle-DelayFirstInstance.cform&quot;&gt;Template&lt;/a&gt; | &lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/ASG-LifeCycle-DelayFirstInstance.params&quot;&gt;Parameters&lt;/a&gt; | &lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/AsgIncrease.zip&quot;&gt;Lambda function&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;

&lt;p&gt;You need to upload the lambda function zip to an S3 bucket, and then provide bucket name / object name in parameters&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 00:44:34 +0000</pubDate>
        <link>https://kaurin.github.io/aws/2015/12/27/cfn-asg-lifecyclehooks.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/aws/2015/12/27/cfn-asg-lifecyclehooks.html</guid>
        
        <category>aws,cfn,autoscaling,asg</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
