<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaurin&#39;s Paste Dump</title>
    <description>Welcome to my paste dump!
</description>
    <link>https://kaurin.github.io/</link>
    <atom:link href="https://kaurin.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 27 Dec 2015 14:03:58 +0000</pubDate>
    <lastBuildDate>Sun, 27 Dec 2015 14:03:58 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>EC2 + Ansible Setup</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;As the name of this website states, this is just my pastedump. By no means is this an all-round best-practice guide. If your use case is to have a light touch on an ansible-master in EC2 wihtout the need to implement ‘ansible-pull’, then I’d consider this an OK guide.&lt;/p&gt;

&lt;p&gt;This is what the setup will look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 control instance in EC2 called ansible-master (public subnet)&lt;/li&gt;
  &lt;li&gt;Multiple target instances in EC2 (private subnet/s)&lt;/li&gt;
  &lt;li&gt;Target instances will belong to different stacks/roles. This will be controlled via EC2 tags&lt;/li&gt;
  &lt;li&gt;No credentials wil be stored on the master instance. We’ll use SSH SendEnv and AgentForward capabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws&quot;&gt;AWS&lt;/h2&gt;

&lt;h3 id=&quot;iam&quot;&gt;IAM&lt;/h3&gt;

&lt;p&gt;Create an “ansible-master” user which has permissions to Describe* on RDS, EC2 and ElastiCache. Download the credentials. You will use them later in &lt;strong&gt;~/.bashrc&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;ec2:Describe*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;elasticache:Describe*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;rds:Describe*&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h3&gt;

&lt;p&gt;Create or import “ansible-master” and “ansible-controller” SSH keys in the EC2 console.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ansible-controller = Workstation -&amp;gt; Ansible master instance&lt;/li&gt;
  &lt;li&gt;ansible-target = Workstation -(ForwardAgent)-&amp;gt; Ansible master -&amp;gt; Ansible targets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This setup allows us to keep all credentials (EC2/SSH) on our local workstation, and just forward those credentials to the “ansible-master” instance when we SSH into it. This suits only my specific use case where I have very little automation on the Ansible side.&lt;/p&gt;

&lt;h3 id=&quot;launch-target-instances&quot;&gt;Launch target instances&lt;/h3&gt;

&lt;p&gt;We will test them later, for now, launch them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Into private subnets&lt;/li&gt;
  &lt;li&gt;SSH key: ansible-target&lt;/li&gt;
  &lt;li&gt;Tag: AnsibleSlave=True&lt;/li&gt;
  &lt;li&gt;Tag: Role=Web&lt;/li&gt;
  &lt;li&gt;Tag: Stack=Prod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Role/Stack are optional, but useful if you want to play around with how you can limit execution based on EC2 tags. If you decide to go with these optional tags, spin up multiple instances and change up the Role and Stack tags among them.&lt;/p&gt;

&lt;p&gt;You never need to know any other EC2 instance details except for the tags. Ansible will figure out the private IPs and other info based on said tags.&lt;/p&gt;

&lt;h2 id=&quot;workstation&quot;&gt;Workstation&lt;/h2&gt;

&lt;h3 id=&quot;sshconfig&quot;&gt;~/.ssh/config&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Host ansible
    HostName xx.xx.xx.xx
    User ec2-user
    SendEnv AWS_ACCESS_KEY_ID
    SendEnv AWS_SECRET_ACCESS_KEY 
    IdentityFile ~/.ssh/ansible-controller
    ForwardAgent yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;bashrc&quot;&gt;~/.bashrc&lt;/h3&gt;

&lt;p&gt;The idea here is to set the AWS env. variables specifically for our connection towards the ansible-master. Unfortunately, we can’t do this in one go in our ssh config.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;AWS_ACCESS_KEY_ID=&amp;quot;SECRET&amp;quot; AWS_SECRET_ACCESS_KEY=&amp;quot;ACCESS&amp;quot; ssh ansible&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ansible-master-instance&quot;&gt;Ansible master instance&lt;/h2&gt;

&lt;h3 id=&quot;ssh-daemon&quot;&gt;SSH Daemon&lt;/h3&gt;

&lt;p&gt;We want to be able to accept the environment variables from the SSH client from our workstation. In order to make this happen, we need to change the sshd_config&lt;/p&gt;

&lt;h4 id=&quot;etcsshsshdconfig&quot;&gt;/etc/ssh/sshd_config&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;AcceptEnv AWS_ACCESS_KEY_ID
AcceptEnv AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ansible-installation&quot;&gt;Ansible installation&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install ansible
sudo pip install ansible --upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default ansible hosts file is plain-text and consists of your hosts and host groups. In EC2, it makes more sense to use the EC2 inventory hosts script which replaces the hosts file. This hosts file also requires the ec2.ini file on which we’ll touch on in a short bit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo wget &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://raw.github.com/ansible/ansible/devel/contrib/inventory/ec2.py&amp;#39;&lt;/span&gt; -O /etc/ansible/hosts
chmod +x /etc/ansible/hosts
sudo wget &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini&amp;#39;&lt;/span&gt; -O /etc/ansible/ec2.ini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ec2ini&quot;&gt;ec2.ini&lt;/h3&gt;

&lt;p&gt;It’s time to change ec2.ini settings.
Note: Adjust this on your own accord. The file is nicely commented. I’ll note some of the settings I adjusted&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[ec2]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;regions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eu-central-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;regions_exclude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;us-gov-west-1,cn-north-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;destination_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;private_dns_name&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;vpc_destination_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;private_ip_address&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;elasticache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache_max_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;instance_filters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tag:AnsibleSlave=True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last option might be the most significant one. Only instances with this tag will be considered as Ansible-controllable&lt;/p&gt;

&lt;h2 id=&quot;time-to-test&quot;&gt;Time to test&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SSH into the instance by running &lt;strong&gt;ansconn&lt;/strong&gt;, which is based on the alias we created in &lt;strong&gt;~/.bashrc&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Run: &lt;code&gt;ansible all -m ping&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run: &lt;code&gt;ansible tag_Role_Web -m ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you implement playbooks, you can fine-grain your prod/stage stacks with a layered approach, but this is exaplined in Ansible docs.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 02:23:00 +0000</pubDate>
        <link>https://kaurin.github.io/aws/2015/12/27/ansible-ec2.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/aws/2015/12/27/ansible-ec2.html</guid>
        
        <category>aws,ansible,ssh</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>CFN + ASG + LifeCycle Hooks</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When you use CFN to provision an ASG with LifeCycle events which trigger on instance launches, the issue is that CFN first creates an ASG. ASG immediately starts spinning up instances based on ASG settings. LifeCycle hooks get created usually with some delay.&lt;/p&gt;

&lt;p&gt;This causes some instances to get launched without being “monitored” by the “launch” lifecylce hooks.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ASG set to 0/0/0 in CFN&lt;/li&gt;
  &lt;li&gt;Custom resource which has “DependsOn” lifecycle resource for instance launches&lt;/li&gt;
  &lt;li&gt;Lambda function which can perform “updateAutoScalingGroup”(called by custom resource)&lt;/li&gt;
  &lt;li&gt;IAM execution role for lambda (as/updateAutoScalingGroup)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Region which supports Lambda&lt;/p&gt;

&lt;h2 id=&quot;cfn-command-to-create-stack&quot;&gt;CFN command to create stack&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws cloudformation update-stack &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --template-body file://ASG-LifeCycle-DelayFirstInstance.cform  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --capabilities CAPABILITY_IAM &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --parameters file://ASG-LifeCycle-DelayFirstInstance.params  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --stack-name MyStackName123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can just change “create-stack” -&amp;gt; “update-stack” if you want to update the stack instead of create a new one.&lt;/p&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/ASG-LifeCycle-DelayFirstInstance.cform&quot;&gt;Template&lt;/a&gt; | &lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/ASG-LifeCycle-DelayFirstInstance.params&quot;&gt;Parameters&lt;/a&gt; | &lt;a href=&quot;https://kaurin.github.io/assets/2015-12-27-cfn-asg-post/AsgIncrease.zip&quot;&gt;Lambda function&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;note&quot;&gt;Note&lt;/h2&gt;

&lt;p&gt;You need to upload the lambda function zip to an S3 bucket, and then provide bucket name / object name in parameters&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 00:44:34 +0000</pubDate>
        <link>https://kaurin.github.io/aws/2015/12/27/cfn-asg-lifecyclehooks.html</link>
        <guid isPermaLink="true">https://kaurin.github.io/aws/2015/12/27/cfn-asg-lifecyclehooks.html</guid>
        
        <category>aws,cfn,autoscaling,asg</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
